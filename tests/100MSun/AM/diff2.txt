6877c6877
<       return	
---
>       return  
6936c6936
<       return	
---
>       return  
7157c7157
< c					      (non-zero if nonconvergence)
---
> c               (non-zero if nonconvergence)
7191,7192c7191,7192
< 	dt = dt0
< 	iflg = 0
---
>   dt = dt0
>   iflg = 0
7198c7198
< 	if (alpha.gt.0.d0) then
---
>   if (alpha.gt.0.d0) then
7204,7207c7204,7207
< 	   esq = ec*ec + es*es
< 	   dm = dt*en - int(dt*en/TWOPI)*TWOPI
< 	   dt = dm/en
< 	   if((dm*dm .gt. 0.16d0) .or. (esq.gt.0.36d0)) goto 100
---
>      esq = ec*ec + es*es
>      dm = dt*en - int(dt*en/TWOPI)*TWOPI
>      dt = dm/en
>      if((dm*dm .gt. 0.16d0) .or. (esq.gt.0.36d0)) goto 100
7209c7209
< 	   if(esq*dm*dm .lt. 0.0016) then
---
>      if(esq*dm*dm .lt. 0.0016) then
7212c7212
< 	       fchk = (xkep - ec*s +es*(1.-c) - dm)
---
>          fchk = (xkep - ec*s +es*(1.-c) - dm)
7214,7217c7214,7217
< 	       if(fchk*fchk .gt. DANBYB) then
< 		  iflg = 1
< 		  return
< 	       endif
---
>          if(fchk*fchk .gt. DANBYB) then
>       iflg = 1
>       return
>          endif
7239,7240c7239,7240
< 	       iflg = 0
< 	       return
---
>          iflg = 0
>          return
7242c7242
< 	   endif
---
>      endif
7267c7267
< 	endif
---
>   endif
7270c7270
<         end   ! drift_dan
---
>         end
7282,7284c7282,7284
< c	Input:
< c	    dm		==> increment in mean anomaly M (real*8 scalar)
< c	    es,ec       ==> ecc. times sin and cos of E_0 (real*8 scalars)
---
> c Input:
> c     dm    ==> increment in mean anomaly M (real*8 scalar)
> c     es,ec       ==> ecc. times sin and cos of E_0 (real*8 scalars)
7293c7293
< 	implicit none
---
>   implicit none
7296,7299c7296,7299
< 	real*8 dm,es,ec
< 	
< c...	Outputs
< 	real*8 x,s,c
---
>   real*8 dm,es,ec
>   
> c...  Outputs
>   real*8 x,s,c
7302c7302
< 	real*8 A0, A1, A2, A3, A4
---
>   real*8 A0, A1, A2, A3, A4
7304,7307c7304,7307
< 	parameter(A3 = 7920.d0, A4 = 110.d0)
< 	real*8 dx
< 	real*8 fac1,fac2,q,y
< 	real*8 f,fp,fpp,fppp
---
>   parameter(A3 = 7920.d0, A4 = 110.d0)
>   real*8 dx
>   real*8 fac1,fac2,q,y
>   real*8 f,fp,fpp,fppp
7311,7314c7311,7314
< 	fac1 = 1.d0/(1.d0 - ec)
< 	q = fac1*dm
< 	fac2 = es*es*fac1 - ec/3.d0
< 	x = q*(1.d0 -0.5d0*fac1*q*(es -q*fac2))
---
>   fac1 = 1.d0/(1.d0 - ec)
>   q = fac1*dm
>   fac2 = es*es*fac1 - ec/3.d0
>   x = q*(1.d0 -0.5d0*fac1*q*(es -q*fac2))
7317,7318c7317,7318
< 	y = x*x
< 	s = x*(A0-y*(A1-y*(A2-y*(A3-y*(A4-y)))))/A0
---
>   y = x*x
>   s = x*(A0-y*(A1-y*(A2-y*(A3-y*(A4-y)))))/A0
7332,7333c7332,7333
< 	y = x*x
< 	s = x*(A0-y*(A1-y*(A2-y*(A3-y*(A4-y)))))/A0
---
>   y = x*x
>   s = x*(A0-y*(A1-y*(A2-y*(A3-y*(A4-y)))))/A0
7336,7337c7336,7337
< 	return
< 	end
---
>   return
>   end
7491c7491
< 	      return
---
>         return
7505c7505
< 	    endif
---
>       endif
7509,7512c7509,7512
< 	   call drift_kepu_p3solve(dt,r0,mu,alpha,u,s,iflg)
< 	   if(iflg.ne.0) then
< 	      s = dt/r0
< 	   endif
---
>      call drift_kepu_p3solve(dt,r0,mu,alpha,u,s,iflg)
>      if(iflg.ne.0) then
>         s = dt/r0
>      endif
7723,7752c7723,7752
< 	denom = (mu - alpha*r0)/6.d0
< 	a2 = 0.5*u/denom
< 	a1 = r0/denom
< 	a0 =-dt/denom
< 
< 	q = (a1 - a2*a2/3.d0)/3.d0
< 	r = (a1*a2 -3.d0*a0)/6.d0 - (a2**3)/27.d0
< 	sq2 = q**3 + r**2
< 
< 	if( sq2 .ge. 0.d0) then
< 	   sq = sqrt(sq2)
< 
< 	   if ((r+sq) .le. 0.d0) then
< 	      p1 =  -(-(r + sq))**(1.d0/3.d0)
< 	   else
< 	      p1 = (r + sq)**(1.d0/3.d0)
< 	   endif
< 	   if ((r-sq) .le. 0.d0) then
< 	      p2 =  -(-(r - sq))**(1.d0/3.d0)
< 	   else
< 	      p2 = (r - sq)**(1.d0/3.d0)
< 	   endif
< 
< 	   iflg = 0
< 	   s = p1 + p2 - a2/3.d0
< 
< 	else
< 	   iflg = 1
< 	   s = 0
< 	endif
---
>   denom = (mu - alpha*r0)/6.d0
>   a2 = 0.5*u/denom
>   a1 = r0/denom
>   a0 =-dt/denom
> 
>   q = (a1 - a2*a2/3.d0)/3.d0
>   r = (a1*a2 -3.d0*a0)/6.d0 - (a2**3)/27.d0
>   sq2 = q**3 + r**2
> 
>   if( sq2 .ge. 0.d0) then
>      sq = sqrt(sq2)
> 
>      if ((r+sq) .le. 0.d0) then
>         p1 =  -(-(r + sq))**(1.d0/3.d0)
>      else
>         p1 = (r + sq)**(1.d0/3.d0)
>      endif
>      if ((r-sq) .le. 0.d0) then
>         p2 =  -(-(r - sq))**(1.d0/3.d0)
>      else
>         p2 = (r - sq)**(1.d0/3.d0)
>      endif
> 
>      iflg = 0
>      s = p1 + p2 - a2/3.d0
> 
>   else
>      iflg = 1
>      s = 0
>   endif
7869,7870c7869,7870
< 	integer iflg
< 	
---
>   integer iflg
>   
7872,7873c7872,7873
< 	integer i
< 	real*8 dttmp
---
>   integer i
>   real*8 dttmp
7880,7883c7880,7883
< 	   if(iflg .ne. 0) then
< 	    
< 	     do i = 1,10
< 	       dttmp = dt/10.d0
---
>      if(iflg .ne. 0) then
>       
>        do i = 1,10
>          dttmp = dt/10.d0
7885,7886c7885,7886
< 	       if(iflg .ne. 0) return
< 	     enddo
---
>          if(iflg .ne. 0) return
>        enddo
7888c7888
< 	   endif
---
>      endif
7914c7914
< 	real*8 function orbel_fget(e,capn)
---
>   real*8 function orbel_fget(e,capn)
7919c7919
< 	real*8 e,capn
---
>   real*8 e,capn
7922,7925c7922,7925
< 	integer i,IMAX
< 	real*8 tmp,x,shx,chx
< 	real*8 esh,ech,f,fp,fpp,fppp,dx
< 	PARAMETER (IMAX = 10)
---
>   integer i,IMAX
>   real*8 tmp,x,shx,chx
>   real*8 esh,ech,f,fp,fpp,fppp,dx
>   PARAMETER (IMAX = 10)
7933,7940c7933,7940
< c  begin with a guess proposed by Danby	
< 	if( capn .lt. 0.d0) then
< 	   tmp = -2.d0*capn/e + 1.8d0
< 	   x = -log(tmp)
< 	else
< 	   tmp = +2.d0*capn/e + 1.8d0
< 	   x = log( tmp)
< 	endif
---
> c  begin with a guess proposed by Danby 
>   if( capn .lt. 0.d0) then
>      tmp = -2.d0*capn/e + 1.8d0
>      x = -log(tmp)
>   else
>      tmp = +2.d0*capn/e + 1.8d0
>      x = log( tmp)
>   endif
7942c7942
< 	orbel_fget = x
---
>   orbel_fget = x
7944c7944
< 	do i = 1,IMAX
---
>   do i = 1,IMAX
7946,7956c7946,7956
< 	  esh = e*shx
< 	  ech = e*chx
< 	  f = esh - x - capn
< c	  write(6,*) 'i,x,f : ',i,x,f
< 	  fp = ech - 1.d0  
< 	  fpp = esh 
< 	  fppp = ech 
< 	  dx = -f/fp
< 	  dx = -f/(fp + dx*fpp/2.d0)
< 	  dx = -f/(fp + dx*fpp/2.d0 + dx*dx*fppp/6.d0)
< 	  orbel_fget = x + dx
---
>     esh = e*shx
>     ech = e*chx
>     f = esh - x - capn
> c   write(6,*) 'i,x,f : ',i,x,f
>     fp = ech - 1.d0  
>     fpp = esh 
>     fppp = ech 
>     dx = -f/fp
>     dx = -f/(fp + dx*fpp/2.d0)
>     dx = -f/(fp + dx*fpp/2.d0 + dx*dx*fppp/6.d0)
>     orbel_fget = x + dx
7958,7964c7958,7964
< 	  if(abs(dx) .le. TINY) RETURN
< 	  x = orbel_fget
< 	enddo	
< 
< 	write(6,*) 'FGET : RETURNING WITHOUT COMPLETE CONVERGENCE' 
< 	return
< 	end   ! orbel_fget
---
>     if(abs(dx) .le. TINY) RETURN
>     x = orbel_fget
>   enddo 
> 
>   write(6,*) 'FGET : RETURNING WITHOUT COMPLETE CONVERGENCE' 
>   return
>   end   ! orbel_fget
7979c7979
< *	         For larger N, uses FGET
---
> *          For larger N, uses FGET
7987c7987
< 	real*8 function orbel_fhybrid(e,n)
---
>   real*8 function orbel_fhybrid(e,n)
7992c7992
< 	real*8 e,n
---
>   real*8 e,n
7995c7995
< 	real*8 abn
---
>   real*8 abn
8001,8002c8001,8002
< 	abn = n
< 	if(n.lt.0.d0) abn = -abn
---
>   abn = n
>   if(n.lt.0.d0) abn = -abn
8004,8008c8004,8008
< 	if(abn .lt. 0.636d0*e -0.6d0) then
< 	  orbel_fhybrid = orbel_flon(e,n)
< 	else 
< 	  orbel_fhybrid = orbel_fget(e,n)
< 	endif   
---
>   if(abn .lt. 0.636d0*e -0.6d0) then
>     orbel_fhybrid = orbel_flon(e,n)
>   else 
>     orbel_fhybrid = orbel_fget(e,n)
>   endif   
8010,8011c8010,8011
< 	return
< 	end  ! orbel_fhybrid
---
>   return
>   end  ! orbel_fhybrid
8032c8032
< 	real*8 function orbel_flon(e,capn)
---
>   real*8 function orbel_flon(e,capn)
8037c8037
< 	real*8 e,capn
---
>   real*8 e,capn
8040,8051c8040,8051
< 	integer iflag,i,IMAX
< 	real*8 a,b,sq,biga,bigb
< 	real*8 x,x2
< 	real*8 f,fp,dx
< 	real*8 diff
< 	real*8 a0,a1,a3,a5,a7,a9,a11
< 	real*8 b1,b3,b5,b7,b9,b11
< 	PARAMETER (IMAX = 10)
< 	PARAMETER (a11 = 156.d0,a9 = 17160.d0,a7 = 1235520.d0)
< 	PARAMETER (a5 = 51891840.d0,a3 = 1037836800.d0)
< 	PARAMETER (b11 = 11.d0*a11,b9 = 9.d0*a9,b7 = 7.d0*a7)
< 	PARAMETER (b5 = 5.d0*a5, b3 = 3.d0*a3)
---
>   integer iflag,i,IMAX
>   real*8 a,b,sq,biga,bigb
>   real*8 x,x2
>   real*8 f,fp,dx
>   real*8 diff
>   real*8 a0,a1,a3,a5,a7,a9,a11
>   real*8 b1,b3,b5,b7,b9,b11
>   PARAMETER (IMAX = 10)
>   PARAMETER (a11 = 156.d0,a9 = 17160.d0,a7 = 1235520.d0)
>   PARAMETER (a5 = 51891840.d0,a3 = 1037836800.d0)
>   PARAMETER (b11 = 11.d0*a11,b9 = 9.d0*a9,b7 = 7.d0*a7)
>   PARAMETER (b5 = 5.d0*a5, b3 = 3.d0*a3)
8060,8068c8060,8068
< 	iflag = 0
< 	if( capn .lt. 0.d0) then
< 	   iflag = 1
< 	   capn = -capn
< 	endif
< 
< 	a1 = 6227020800.d0 * (1.d0 - 1.d0/e)
< 	a0 = -6227020800.d0*capn/e
< 	b1 = a1
---
>   iflag = 0
>   if( capn .lt. 0.d0) then
>      iflag = 1
>      capn = -capn
>   endif
> 
>   a1 = 6227020800.d0 * (1.d0 - 1.d0/e)
>   a0 = -6227020800.d0*capn/e
>   b1 = a1
8072c8072
< c  Begin with a reasonable guess based on solving the cubic for small F	
---
> c  Begin with a reasonable guess based on solving the cubic for small F 
8075,8082c8075,8082
< 	a = 6.d0*(e-1.d0)/e
< 	b = -6.d0*capn/e
< 	sq = sqrt(0.25*b*b +a*a*a/27.d0)
< 	biga = (-0.5*b + sq)**0.3333333333333333d0
< 	bigb = -(+0.5*b + sq)**0.3333333333333333d0
< 	x = biga + bigb
< c	write(6,*) 'cubic = ',x**3 +a*x +b
< 	orbel_flon = x
---
>   a = 6.d0*(e-1.d0)/e
>   b = -6.d0*capn/e
>   sq = sqrt(0.25*b*b +a*a*a/27.d0)
>   biga = (-0.5*b + sq)**0.3333333333333333d0
>   bigb = -(+0.5*b + sq)**0.3333333333333333d0
>   x = biga + bigb
> c write(6,*) 'cubic = ',x**3 +a*x +b
>   orbel_flon = x
8085c8085
< 	if( capn .lt. TINY) go to 100
---
>   if( capn .lt. TINY) go to 100
8087,8095c8087,8095
< 	do i = 1,IMAX
< 	  x2 = x*x
< 	  f = a0 +x*(a1+x2*(a3+x2*(a5+x2*(a7+x2*(a9+x2*(a11+x2))))))
< 	  fp = b1 +x2*(b3+x2*(b5+x2*(b7+x2*(b9+x2*(b11 + 13.d0*x2)))))   
< 	  dx = -f/fp
< c	  write(6,*) 'i,dx,x,f : '
< c	  write(6,432) i,dx,x,f
< 432	  format(1x,i3,3(2x,1p1e22.15))
< 	  orbel_flon = x + dx
---
>   do i = 1,IMAX
>     x2 = x*x
>     f = a0 +x*(a1+x2*(a3+x2*(a5+x2*(a7+x2*(a9+x2*(a11+x2))))))
>     fp = b1 +x2*(b3+x2*(b5+x2*(b7+x2*(b9+x2*(b11 + 13.d0*x2)))))   
>     dx = -f/fp
> c   write(6,*) 'i,dx,x,f : '
> c   write(6,432) i,dx,x,f
> 432   format(1x,i3,3(2x,1p1e22.15))
>     orbel_flon = x + dx
8097,8099c8097,8099
< 	  if(abs(dx) .le. TINY) go to 100
< 	  x = orbel_flon
< 	enddo	
---
>     if(abs(dx) .le. TINY) go to 100
>     x = orbel_flon
>   enddo 
8103,8111c8103,8111
< 	if(iflag .eq. 1) then
< 	   orbel_flon = -orbel_flon
< 	   capn = -capn
< 	endif
< 	write(6,*) 'FLON : RETURNING WITHOUT COMPLETE CONVERGENCE' 
< 	  diff = e*sinh(orbel_flon) - orbel_flon - capn
< 	  write(6,*) 'N, F, ecc*sinh(F) - F - N : '
< 	  write(6,*) capn,orbel_flon,diff
< 	return
---
>   if(iflag .eq. 1) then
>      orbel_flon = -orbel_flon
>      capn = -capn
>   endif
>   write(6,*) 'FLON : RETURNING WITHOUT COMPLETE CONVERGENCE' 
>     diff = e*sinh(orbel_flon) - orbel_flon - capn
>     write(6,*) 'N, F, ecc*sinh(F) - F - N : '
>     write(6,*) capn,orbel_flon,diff
>   return
8114,8117c8114,8117
< 100	if(iflag .eq. 1) then
< 	   orbel_flon = -orbel_flon
< 	   capn = -capn
< 	endif
---
> 100 if(iflag .eq. 1) then
>      orbel_flon = -orbel_flon
>      capn = -capn
>   endif
8119,8120c8119,8120
< 	return
< 	end     ! orbel_flon
---
>   return
>   end     ! orbel_flon
8138c8138
< *	      series for small Q.
---
> *       series for small Q.
8141c8141
< 	real*8 function orbel_zget(q)
---
>   real*8 function orbel_zget(q)
8146c8146
< 	real*8 q
---
>   real*8 q
8149,8150c8149,8150
< 	integer iflag
< 	real*8 x,tmp
---
>   integer iflag
>   real*8 x,tmp
8155,8167c8155,8167
< 	iflag = 0
< 	if(q.lt.0.d0) then
< 	  iflag = 1
< 	  q = -q
< 	endif
< 
< 	if (q.lt.1.d-3) then
< 	   orbel_zget = q*(1.d0 - (q*q/3.d0)*(1.d0 -q*q))
< 	else
< 	   x = 0.5d0*(3.d0*q + sqrt(9.d0*(q**2) +4.d0))
< 	   tmp = x**(1.d0/3.d0)
< 	   orbel_zget = tmp - 1.d0/tmp
< 	endif
---
>   iflag = 0
>   if(q.lt.0.d0) then
>     iflag = 1
>     q = -q
>   endif
> 
>   if (q.lt.1.d-3) then
>      orbel_zget = q*(1.d0 - (q*q/3.d0)*(1.d0 -q*q))
>   else
>      x = 0.5d0*(3.d0*q + sqrt(9.d0*(q**2) +4.d0))
>      tmp = x**(1.d0/3.d0)
>      orbel_zget = tmp - 1.d0/tmp
>   endif
8169c8169
< 	if(iflag .eq.1) then
---
>   if(iflag .eq.1) then
8171,8176c8171,8176
< 	   q = -q
< 	endif
< 	
< 	return
< 	end    ! orbel_zget
< c----------------------------------------------------------------------
---
>      q = -q
>   endif
>   
>   return
>   end    ! orbel_zget
> c----------------------------------------------------------------------
\ No newline at end of file
